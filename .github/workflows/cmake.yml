name: CMake

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build steps are platform agnostic and should work equally
    # well on Windows, macOS, and Linux. The specific build steps are defined in the
    # platform-specific sections below.
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        sudo apt-get install -y libboost-all-dev libeigen3-dev
        sudo apt-get install -y libcurl4-openssl-dev
        # Install PyTorch C++ API dependencies
        sudo apt-get install -y libtorch-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja boost eigen curl
        # Install PyTorch C++ API dependencies
        brew install libtorch

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install vcpkg and dependencies
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg install boost-system boost-filesystem eigen3 curl
        .\vcpkg install torch:x64-windows
        cd ..

    - name: Configure CMake
      # Use a relative path as a working directory, so the workflow can find the
      # CMakeLists.txt file.
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure -C ${{env.BUILD_TYPE}}

    - name: Run comprehensive tests
      working-directory: ${{github.workspace}}/build
      run: ./tests/test_esx

  test-features:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        sudo apt-get install -y libboost-all-dev libeigen3-dev
        sudo apt-get install -y libcurl4-openssl-dev
        sudo apt-get install -y libtorch-dev
    
    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug
    
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Debug
    
    - name: Test Memory Broker
      working-directory: ${{github.workspace}}/build
      run: |
        echo 'let x = tensor([[1,2],[3,4]]); memory_broker(x, max_mem:8, strategy:zeRO);' | ./esx
    
    - name: Test Quantization
      working-directory: ${{github.workspace}}/build
      run: |
        echo 'let x = tensor([[1,2],[3,4]]); quantize(x, bits:8, method:ptq);' | ./esx
    
    - name: Test Kernel Fusion
      working-directory: ${{github.workspace}}/build
      run: |
        echo 'let x = tensor([[1,2],[3,4]]); let y = tensor([[5,6],[7,8]]); let z = fused_matmul_relu(x, y);' | ./esx
    
    - name: Test Pattern Recognition
      working-directory: ${{github.workspace}}/build
      run: |
        echo 'let x = tensor([[1,2],[3,4]]); pattern_recognize(x, rules:geometric);' | ./esx

  performance-test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        sudo apt-get install -y libboost-all-dev libeigen3-dev
        sudo apt-get install -y libcurl4-openssl-dev
        sudo apt-get install -y libtorch-dev
    
    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Release
    
    - name: Performance Benchmark
      working-directory: ${{github.workspace}}/build
      run: |
        echo "Running performance benchmarks..."
        time echo 'let x = tensor([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]); let y = x @ x; let attn = attention(x, x, x, heads:8, dim:4, flash=true);' | ./esx
        echo "Performance test completed"
